/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WebSocketConnection as PrismaWebSocketConnection,
  Message as PrismaMessage,
  Subscription as PrismaSubscription,
  User as PrismaUser,
} from "@prisma/client";

export class WebSocketConnectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WebSocketConnectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.webSocketConnection.count(args);
  }

  async webSocketConnections<T extends Prisma.WebSocketConnectionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WebSocketConnectionFindManyArgs>
  ): Promise<PrismaWebSocketConnection[]> {
    return this.prisma.webSocketConnection.findMany<Prisma.WebSocketConnectionFindManyArgs>(
      args
    );
  }
  async webSocketConnection<T extends Prisma.WebSocketConnectionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WebSocketConnectionFindUniqueArgs>
  ): Promise<PrismaWebSocketConnection | null> {
    return this.prisma.webSocketConnection.findUnique(args);
  }
  async createWebSocketConnection<
    T extends Prisma.WebSocketConnectionCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WebSocketConnectionCreateArgs>
  ): Promise<PrismaWebSocketConnection> {
    return this.prisma.webSocketConnection.create<T>(args);
  }
  async updateWebSocketConnection<
    T extends Prisma.WebSocketConnectionUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WebSocketConnectionUpdateArgs>
  ): Promise<PrismaWebSocketConnection> {
    return this.prisma.webSocketConnection.update<T>(args);
  }
  async deleteWebSocketConnection<
    T extends Prisma.WebSocketConnectionDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WebSocketConnectionDeleteArgs>
  ): Promise<PrismaWebSocketConnection> {
    return this.prisma.webSocketConnection.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.webSocketConnection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.webSocketConnection
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.webSocketConnection
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
